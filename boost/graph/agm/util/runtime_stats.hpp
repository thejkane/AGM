// Copyright (C) 2018 Thejaka Amila Kanewala, Marcin Zalewski, Andrew Lumsdaine.

// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//  Authors: Thejaka Kanewala
//           Andrew Lumsdaine

#ifndef __AGM_RUNTIME_STATS__
#define __AGM_RUNTIME_STATS__
class runtime_stats {
private:
  int n_all_to_alls;
  uint64_t n_epochs;  
  std::vector<uint64_t> n_sends;
  std::vector<uint64_t> n_receives;
  int threads;

public:
  runtime_stats(int _threads): threads(_threads),
                               n_all_to_alls(0),
                               n_epochs(0){
    //    std::cout << "threads in constructor : " << threads << std::endl;
    n_sends.resize(threads, 0);
    n_receives.resize(threads, 0);
  }

  void increment_all_to_alls() {
#ifdef PBGL2_WORK_STATS
    n_all_to_alls++;
#endif
  }

  void increment_epochs(int tid) {
#ifdef PBGL2_WORK_STATS
    if (tid == 0)
      n_epochs++;
#endif
  }

  void increment_sends(int tid) {
    //std::cout << "tid in increment send : " << tid << std::endl;    
#ifdef PBGL2_WORK_STATS
    n_sends[tid]++;
#endif
  }
  
  void increment_receives(int tid) {
#ifdef PBGL2_WORK_STATS
    n_receives[tid]++;
#endif
  }  
};
#endif
