// Copyright (C) 2018 Thejaka Amila Kanewala, Marcin Zalewski, Andrew Lumsdaine.

// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//  Authors: Thejaka Kanewala
//           Andrew Lumsdaine

#ifndef __GIZMO_STAT__
#define __GIZMO_STAT__

#include <iostream>

namespace boost { namespace graph { namespace agm {
      
class stat_reader {

private:
  uint64_t useful_work;
  uint64_t rejected_work;
  uint64_t invalidated_work;

public:
  stat_reader() : useful_work(0), rejected_work(0), invalidated_work(0) {}

  void print() {
    std::cout << "[INFO] Useful work : " << useful_work << std::endl;
    std::cout << "[INFO] Rejeceted work : " << rejected_work << std::endl;
    std::cout << "[INFO] Invalidated work : " << invalidated_work << std::endl;
  }

  void increment_invalid() {
    ++invalidated_work;
  }

  void increment_reject() {
    ++rejected_work;
  }

  void increment_useful() {
    ++useful_work;
  }

  void reset() {
    useful_work = 0;
    rejected_work = 0;
    invalidated_work = 0;
  }
};

}}}
#endif
