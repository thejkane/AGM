// Copyright (C) 2018 Thejaka Amila Kanewala, Marcin Zalewski, Andrew Lumsdaine.

// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//  Authors: Thejaka Kanewala
//           Andrew Lumsdaine

#ifndef __AGM_BUCKET_STATS__
#define __AGM_BUCKET_STATS__
#include <atomic>

class bucket_stats {
private:
  std::atomic<std::uint64_t> buckets_created;
  std::vector<std::uint64_t> total_pushes;

public:
  bucket_stats(int nthreads):buckets_created(0),
                             total_pushes(nthreads, 0){}
  void increment_buckets() {
    buckets_created++;
  }

  void increment_pushes(int tid) {
    ++total_pushes[tid];
  }

  void print() {
    std::uint64_t sum = std::accumulate(total_pushes.begin(), total_pushes.end(), 0);

    std::uint64_t global_sum = 0;
    MPI_Allreduce(&sum, &global_sum, 1, MPI_UINT64_T, MPI_SUM, MPI_COMM_WORLD);
    info("Buckets created : ", buckets_created.load());
    info("Total pushes to the data-structure : ", global_sum);    
  }

  std::uint64_t get_number_of_bkst_created() {
    return (buckets_created.load());
  }
};

#endif
