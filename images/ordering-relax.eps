%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 268.000000 121.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1212) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 268 121
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 268 121
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: AndaleMono
%!FontType1-1.0: AndaleMono 1.0000.2.0000
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /AndaleMono def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /P put
dup 34 /r put
dup 35 /o put
dup 36 /c put
dup 37 /e put
dup 38 /s put
dup 39 /i put
dup 40 /n put
dup 41 /g put
dup 42 /space put
dup 43 /F put
dup 44 /u put
dup 45 /t put
dup 46 /O put
dup 47 /d put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 0 1 index div -447 2 index div 1229 3 index div 2038 5 -1 roll div]cvx def
/sfnts [<


022546206861B00325B003253F2321381B2111592D2C2045B00325465058B0022546206861B00325B003253F2321381B2111592D2C00B00743B006430B2D2C8A10EC2D2CB00C4358211B2046B0005258B8FFF0381BB0103859592D2C20B0005558B8100063B003254564B00325456461B0005358B0021BB04061B00359254569535845441B2121591B21B0022545B00225456164B028515845441B212159592D2C21210C6423648BB84000622D2C21B08051580C6423648BB82000621BB200402F2B59B002602D2C21B0C051580C6423648BB81555621BB200802F2B59B002602D2C0C6423648BB84000626023212D2C4B5358B00425B00425496423456469B0408B6120B080626AB00225B00225618CB0462344218A10B046F6211B218A11231220392F592D2CB00225B002254964B0C05458B8FFF838B008381B2121592D2CB0134358031B02592D2CB0134358021B03592D2CB00A2B2310203CB0172B2D2CB00225B8FFF038B0282B8A102320D023B0102BB0054358C01B3C59201011B00012012D2C4B53234B515A58381B2121592D2C01B0022510D023C901B00113B0001410B0013CB001162D2C01B00013B001B0032549B0031738B001132D2C4B53234B515A5820458A60441B2121592D2C20392F2D00000200D8000003F50560000300070014B707010400050304002FCD2FCD002FCD2FCD31303311211125211121D8031DFD63021DFDE30560FAA080046000010100000003EC058300090034401E059302080702931B30019308030712030901067F07400B096E020A076B022B2B011A18104DFD3C10C4003F3FED2B10ED31300121112115211123112103ECFDB80214FDECA402EC04F4FE338FFD6805830002007FFFE5044A059E000B0015005AB506100D0F3600B8FFF0403A0D0F36281038108810A810E810F81006270C370C870CA70CE70CF70C0698060197000102109300040C9306130E7D0317036F02137D0916096C022B10ED2B10ED003FED3FED5F5D5D5D5D2B2B3130013212111002232202111012132011102122021110120264EDF9F8EEECF9F8ED0138FEC8989F9E059EFE89FE9AFE9CFE880177016501650178FAD7024C024DFECFFEE4FEE1FED30000020100000004250583000A001200574037181028100258106810781003010B936808780802000808091293000309120704170487040308020E7D040B097F0A4014046E02130A6B022B2B011A18104DFD3C10ED5F5E5D003F3FED12392F5F5DED3130015F5D71012132161514062B0111231333203534262B0101000166CBF4F3C5C9A4A4B201219D7CBA0583CCB3B4D7FD870308F2708A000100B0FFE503F6042B00150060403D97130102980D01030A950B0D9508100095681578158815030015139502130510151065107510040B030A420010830540070501130217


95678241FAC1C07D1E839682A3519679726233ECC37E9A037D2B55472D431D2B1D51734C95AD3A873E615036552E252548643E879E2B000100F0FFE70404052F0014005E403618032803020330080E3608030101071201F71201020E050905950B080F009514129502130C00040A0F07090F850704010800040416151112392F5F5E5DED3CC4103C10D4C6003FFDD6ED3F3CEDCD103C5F5D713130015F5D002B007125062320190123353311331121152111141633323704049D98FEE9C8C8980162FE9E5448807D2F480127027D87011DFEE387FDAC5F693900000100D5FFE703F804120010005CB70A051A050208030BB8FFF0402E1113360F070F0E0802011601022012143602E20410080C360C95041301120E0185000985064012006802110665022B2B011A18104DED10FD3C003F3FED2BFD2B5F5E5DCD3F3C3130012B015F5E5D212335062320190133111416333237113303F89CA8BAFEDB9C54648FA49C9AB3016302C8FD658583B202F1000002004800AA04850564001C00280092B90015FFF0B30D133610B8FFF040130D133606100D133602100D13361C100D123618B8FFF0B30D12360DB8FFF040410D123609100D12360D1015181C02060908042397121D9704B82001B72601A71C01A71801A80901A80D01020D1015181C020609080B20851A2685070B170B02000B2F5F5DEDD4ED1217395F5D5D5D5D5D5D002FEDD4ED1217392B2B2B2B2B2B2B2B31300107270623222707273726353437273717361732161737170716151407053236353426232206151416048573BA72827C75B972B86A6AB872B96C854A6941BA73B86868FE977FB7B6807FB4B4010A60CF4444CF60D383A4A87FD564D346042121D364D5899EA1860AB57E7FB4B47F7FB4000000010000000200001A3694785F0F3CF5000B080000000000AF2E0C8D00000000C1ED5FEF0000FE4104CD07F6000000080001000000000000000100000742FE42000004CD0000000004CD00010000000000000000000000000000001104CD00D804CD000004CD010004CD007F04CD010004CD00B004CD009104CD00AA04CD00B204CD012704CD00D704CD009104CD014604CD00E904CD00F004CD00D504CD00480000001E001E004E00A700F3014801BC02210337036C03B40430046C0531058305CE0657000100000011012200490051000500020010001B003B0000020F06B70003000240F2DFE016171CD4D516171C7B7C161B7B7C1910D474D484D4D4D4E4D4051076407650766F7604D1D216171C767716171C6D7016171C6C6F16171C6B6E161B09006B01084F6E5F6EDF6EEF6EFF6E05006BA06BB06B030F6E016B6E7F721AF6F714151CF4F514151CF2F314151C747514151C676A14151C666914151C6568141B00F6C0F6023F684F685F680300658065C06503DF68EF68FF

00>] def
/CharStrings 17 dict dup begin
/.notdef 0 def
/space 1 def
/F 2 def
/O 3 def
/P 4 def
/c 5 def
/d 6 def
/e 7 def
/g 8 def
/i 9 def
/n 10 def
/o 11 def
/r 12 def
/s 13 def
/t 14 def
/u 15 def
/currency 16 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{0 -447 1229 2038}def
/UniqueID 4431224 def
currentdict currentfile eexec

C06CE478400DBB0743132C8045C7020DDF93020A8D985C408C978DB2C7F53785DDCDA4294EC559CECD008CC8F94167008846B00C52778F0E27DE412DD84B8E22FC8BC20FFF6CE4F1557E569CFA5112315552DE5D4E468F6417DFA43735CCA36A44C53B718CFEF9771B9F8A4F0C50A62D83751AC408CD24B32765AEC3C00E222784A8542982FDF26FFE9D1CAC35DF6A38B6345A8AD9ABBEAC0921D2D23A21DC209BADF743F073C3FBBD351DD1C1CE298FA6FAEEA2D864D0B0BAA4F80557C81A538FA5722C71E085EB68F06B6BEDF4DDB8E19DAE8AB22A18EB5671EB981347D1522EEAC4D8C9611B653967E894EF587473F94483AA6F01A6E6A3D75A17631B83D71ECF1D9E987F044428FE10EF99A3768CE19DBF896CD9406C1070249D505784E448103CF74AF14B8B2085C9ED90F9F14DEEAC1F587454A757503CBCBF66B298FE61A000DD6003FCFB28CD844780EBA8AEDD465C1A88F9F629B84512026F59749F0769CAD32385D5579D1A8699A1D5BAF3BB03FD19DC0224470BF7AFE4131E280FE5C0E9C0C571C29C585F6F785122A3AE7D34B8E0C87772C59C352C5678709346188261BF59707CAB5A22E04B5763961F07E56A86173A516D64413C8DFAFA9B6FF754A592AAA40FBA6217DFDA2D35356968112C9DDFE23627012612A6AF704AE19D98DEB34C939DBF8D63CA4871B8A99486A7717E6BD1DEEFAAF5554CCFAE5DEAFE75E11198EF0910FDBE844ACC573E519A366C177DFB3024988E2CF7B64D92EFCF20A8B44A6B37BB834D75C5C5B1983255BB0F962337F9EB4A8800D1C01D387574ECBBE454A0BBB8D0488671BAAD183813BCE4CC57BEA30EC5CA31CA88548F2C45CF301EDD74D22C160F8CBB7A336E0D95431ED72AC24C68231AFD1630069D026231ADE43A41368344344A32DD905DD713B9F7E74DAE8474A5F0D7ED49D9464DD380399544EE4AD9F90E1741C089742428233AD0BFDFB7E14C7349D98C2335077D82BF5E9AC3EE66AE8BFFB864B9445EF02D73782E96FB49FC9889B415204C867924C734D9A0484C4C1E0E7D5DB106E4FBDE4FF6C4971786A3584F9953DB4F180D3E97854953E0693448E91B375AD27F734F213D02D1937723B2F2BC67E53D1590E44EA9912D790523E2CB0CC956215B932BA790DB142CB8F8C2C20FC3FD0B119FC35E2B6508BD4BEFAB2AEEFEC83A6B8D36EF83948BDD15189D4B77F347869B201691091273DD4F8B9C0B0AB091442E44FDF8A63532B2740B2710B38110F5A93C93D56452A94A9E80BD085028F247BF673D1A45A9C71B1F75C606723F0D420DF4740CFD1DBAAACF83BDFD7957032103CB8482EEFBBFFF8BCA7D494F7B709960073F42FD4D9CA4ADFC90F4F57AE6ABC0C05EF3CF6C7F2574D0E5B255CAAD6F2976D98B84E0C99332E60916FAB3908E7939F1BBE5C321ADC0B058DDBA01F80C78
146C6603CDDA8DAEAEF38B767F5090A4ED7B5ED2BB199234B8EF83B6415F72B8BE3F89986D92A9B1AC09BF598CA8034AA54071DE20DC9C0BC63B88BA2FADA80C7A573DFA6127A7F11AEB90C328D4D51D88AC2008506D645C105A4FCEC25A2AC93E69DF4C6D4FC4AEE7C6B2C4C1DB89AF1F37A4ADC5CD22CD09F48F7274C4381CA758BF4FF9370CF7168AD9630BC449DBECFA587BE557A0A090E022820180398A45CAE0CF5737DAECAFEF61BFBE72BC8655E6A9BC6BE453AEE3AC88BD31477D71C5BFF3B1165D385FC94BCABB80DF10DEA8691BA583C1EA9E085CDC6A6B4AEE301D58F8D56983E480A9EA78551A2A5C8C6653948ACEB6BD0A54437B640B8F18841E34C38B18050DA7B3216547DAF5C852C8DD54BAC51461F442858038612C1DFE1C137A93A6E6C214EED78CB2DB56495A420060B6929B7D2FA385F4252F424ED842C1492F67FD75BDD50AB07E933E0A169C51AD7DB80606CB16E882600A48F87FA6EA00358C25B8831250F522D6A3332A78D9CE9EE361B8DECC6E51CEA1CD22FEA2B18B574BA552E18A344D6677213F66644CB3BC0EBCDE0DACF30E52C4E7847FC1DECE27EA869446B0F8925478BE83B20CCF925DED264C950C099BE03EF8252A5CBBBDE54772AD989E45DDC7E3FB7C204F0629DE773E070C8C1E831A142AFDF9E5F31855E59DACE95FB2174770C8452782AC7CDBAC1764FF0150FD4522D26863CC38679197CC23BE9811DC42C81C87A51EDB6853312A541B0E0A361787AAB88EF4152220B0905FE9BF103A04CF518C8C7A77821121F0A86F28C4647920AB7E18ED1CA70C6034ABA238216A3CEB224EF7166539AE6E4F8A3D71084384994E917927707545A9496D91F9EF00661C25D7A0EFEB977651771C4AC6A2D3D5FDF2F0103C3C2FCBFB7F7C1C56FBD61E4535ADF01C04C2D4DC133D6B5904CE31B3061E39DF3A8522EE5B02771612AD6AC1CE1592462C5E3C24A8467F318B8F8D4C20CDC44009D116B521847533462A5480139BACC403909272FA5D548DE8406B85B869A7F6C3F8C51940E05A0132ED255E180433F1C3712FC7ED62CCF8CC3D7625FB0934FA94B229F5B702052C1352F421CEB60DBD6F34BDEF0A451960B78218915C244022767D1EE3BDCD7D41A591398418B7C16CFCEF9762CBFBF8F4448F7AB73BF04757F72AF1A001B4D5715886C569EAD5E0B3A0DA4F5EE3AFC46449373F1A044D8A30D03631BD58F7AF281B6540C94F8B15C27306
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/AndaleMono cguidfix
/F1.1/AndaleMono renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 268 121 rc
28.585812 118.77953 m
236.21733 118.77953 l
236.21733 84.33242 l
28.585812 84.33242 l
h
28.585812 118.77953 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -195 235 cm
223.58582 116.22047 m
431.21735 116.22047 l
431.21735 150.66757 l
223.58582 150.66757 l
h
223.58582 116.22047 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 132.40157 101.55598 cm
/F1.1[ 16 0 0 -16 0 0]sf
-91.214844 6 m
(!"#$%&&'\(\)*+,\($-'#\()[ 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
28.585812 37.006165 m
236.21733 37.006165 l
236.21733 2.5590565 l
28.585812 2.5590565 l
h
28.585812 37.006165 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -195 235 cm
223.58582 197.99384 m
431.21735 197.99384 l
431.21735 232.44095 l
223.58582 232.44095 l
h
223.58582 197.99384 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 132.40157 19.78261 cm
-38.40625 6 m
(."/%"'\(\))[ 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 9.601562 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -195 235 cm
431.21735 130.39371 m
459.21259 130.39371 l
459.21259 221.10236 l
440.16614 221.10236 l
S
0 i
CM
239.16614 13.897639 m
248.76614 10.297639 l
245.16614 13.897639 l
245.16614 13.897639 l
248.76614 17.497639 l
h
239.16614 13.897639 m
f
0 J
0 j
1 0 0 -1 -195 235 cm
434.16614 221.10236 m
443.76614 224.70236 l
440.16614 221.10236 l
440.16614 221.10236 l
443.76614 217.50237 l
h
434.16614 221.10236 m
S
1 J
1 j
0.60000002 i
223.08595 217.68448 m
198.4252 218.26772 l
198.4252 130.39371 l
214.63701 130.39371 l
S
0 i
CM
25.637007 104.6063 m
16.037006 108.2063 l
19.637007 104.6063 l
19.637007 104.6063 l
16.037006 101.0063 l
h
25.637007 104.6063 m
f
0 J
0 j
1 0 0 -1 -195 235 cm
220.63701 130.39371 m
211.037 126.7937 l
214.63701 130.39371 l
214.63701 130.39371 l
211.037 133.9937 l
h
220.63701 130.39371 m
S
ep
end
%%Trailer
%%EOF
