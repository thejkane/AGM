// Copyright (C) 2018 Thejaka Amila Kanewala, Marcin Zalewski, Andrew Lumsdaine.

// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//  Authors: Thejaka Kanewala
//           Andrew Lumsdaine

#ifndef __AGM_PRAM_MODEL__
#define __AGM_PRAM_MODEL__

#include "access_metadata.hpp"

enum operation_mode {
  pram_crcw,
  pram_ercw,
  pram_erew,
  pram_crew
};

class shared_memory {

private:
  int parallel_threads;
  int current_thread;
  uint64_t running_cost;
  operation_mode mode;
  uint64_t total_cost;

public:
  // programming model is always erew (cos the simulation is sequential)
  shared_memory(int threads):parallel_threads(threads), current_thread(0), running_cost(0),
	 mode(pram_erew), total_cost(0){}

  void update(const access_metadata& meta) {
    if (running_cost < meta.get_total_cost()) {
      running_cost = meta.get_total_cost();
    }

    ++current_thread;
    if (current_thread == parallel_threads) {
      total_cost += running_cost;
      running_cost = 0;
    }
  }

  void print() {
    std::cout << "[Shared-Memory] Total cost : " << total_cost << std::endl;
  }

};

#endif
