// Copyright (C) 2018 Thejaka Amila Kanewala, Marcin Zalewski, Andrew Lumsdaine.

// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//  Authors: Thejaka Kanewala
//           Andrew Lumsdaine

#ifndef __AGM_LOGP_MODEL__
#define __AGM_LOGP_MODEL__

#include "../../utils/file_reader.hpp"

class distributed_logp {

private:
  int ranks;
  double latency;
  double overhead;
  double gap;

public:
  template<typename work_item_t>
  void initialize(transport& trans, const gizmo_config& configs) {
    double bwdth = configs.get_double(KEY_BANDWIDTH);
    assert(bwdth != 0);
    // Bandwidth is in MB/sec, convert it to bytes / sec
    gap = 1/bwdth;
    gap = gap / std::pow(2, 20);
    gap = gap * std::pow(10, 6); // gap in micro-seconds
    // gap is for 1 bytes
    // shouldnt we adjust value for n bytes ? TODO check


    latency = configs.get_double(KEY_LATENCY);
    ranks = configs.get_int(KEY_RANKS);

  }

};




#endif
