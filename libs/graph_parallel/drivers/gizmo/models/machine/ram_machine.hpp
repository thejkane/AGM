// Copyright (C) 2018 Thejaka Amila Kanewala, Marcin Zalewski, Andrew Lumsdaine.

// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//  Authors: Thejaka Kanewala
//           Andrew Lumsdaine

#ifndef __AGM_RAM_MACHINE__
#define __AGM_RAM_MACHINE__

#include <stdio.h>
#include <queue>
#include "../../utils/file_reader.hpp"
#include "distribution.hpp"
#include "abstract_machine.hpp"


template<typename WorkItem,
	 typename StrictWeakOrderingRelation,
	 typename ProcessingFunction,
	 typename GraphDistribution=block_graph_distribution>
class ram_machine : public abstract_machine<WorkItem, StrictWeakOrderingRelation, 
						  ProcessingFunction, GraphDistribution> {

public:
  typedef abstract_machine<WorkItem, StrictWeakOrderingRelation,
			   ProcessingFunction, GraphDistribution> abstract_machine_t;

private:
  bool self_send;
  int latency_value;
  int send_overhead;
  int recv_overhead;

public:
  ram_machine(uint64_t n,
	      ProcessingFunction& _pf) : abstract_machine_t(n, _pf),
					 self_send(true),
					 latency_value(0),
					 send_overhead(0),
					 recv_overhead(0){}
  
  bool initialize(const gizmo_config& configs) {
    
    abstract_machine_t::initialize(configs);

    self_send = configs.get_bool(KEY_SELF_SEND_ENABLED);
    send_overhead = configs.get_int(KEY_SEND_OVERHEAD);
    recv_overhead = configs.get_int(KEY_RECV_OVERHEAD);
    latency_value = configs.get_int(KEY_LATENCY_VALUE);
  }

  int get_send_overhead() {
    // TODO decide precisely
    if (self_send)
      return 0;
    else 
      return 1;
  }

  int get_transmission_time(int source, int destination) {
    self_send = false;//debug
    if (self_send)
      return 0;
    else
      return 1700;
  }
};

struct ram_machine_gen {
public:
  template <typename WorkItem, typename StrictWeakOrderingRelation, typename ProcessingFunction>
  struct inner {
    typedef ram_machine<WorkItem, StrictWeakOrderingRelation, ProcessingFunction> type;
  };
};

#endif
